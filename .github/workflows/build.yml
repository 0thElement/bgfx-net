name: Build package
on: push
jobs:
  buildBgfxLibraryForWindows:
    name: Build bgfx for Windows ${{matrix.platform.target}}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x64
            output: '64'
          - target: Win32
            output: '32'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true
          submodules: recursive
      - name: Set up MsBuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Build library
        run: |
          cd bgfx
          ../bx/tools/bin/windows/genie --with-shared-lib vs2019
          msbuild .build/projects/vs2019/bgfx.sln -property:Configuration=Release -property:Platform=${{matrix.platform.target}}
          cp .build/win${{matrix.platform.output}}_vs2019/bin/bgfx-shared-libRelease.dll ../bgfx.dll
      - uses: actions/upload-artifact@v4
        with:
          name: bgfx-Windows-${{matrix.platform.target}}
          path: bgfx.dll
  buildBgfxLibraryForLinux:
    name: Build bgfx for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true
          submodules: recursive
      - name: Install dependencies
        run: sudo apt-get install libgl1-mesa-dev x11proto-core-dev libx11-dev
      - name: Build library
        run: |
          cd bgfx
          ../bx/tools/bin/linux/genie --with-shared-lib --gcc=linux-gcc gmake
          make linux-release64
          cp .build/linux64_gcc/bin/libbgfx-shared-libRelease.so ../libbgfx.so
      - uses: actions/upload-artifact@v4
        with:
          name: bgfx-Linux
          path: libbgfx.so
  buildBgfxLibraryForOSX:
    name: Build bgfx for OSX ${{matrix.platform}}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - x64
          - arm64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true
          submodules: recursive
      - name: Build library
        run: |
          cd bgfx
          ../bx/tools/bin/darwin/genie --with-shared-lib --gcc=osx-${{matrix.platform}} gmake
          make osx-${{matrix.platform}}-release
          cp .build/osx-${{matrix.platform}}/bin/libbgfx-shared-libRelease.dylib ../libbgfx.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: bgfx-OSX-${{matrix.platform}}
          path: libbgfx.dylib
#   buildBgfxLibraryForAndroid:
#     name: Build bgfx for Android ${{matrix.platform}}
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         platform:
#           - arm
#           - arm64
#           - x86_64
#     steps:
#     - uses: actions/checkout@v3
#       with:
#         fetch-depth: 1
#         lfs: true
#         submodules: recursive
#     - name: Build library
#       run: |
#         cd bgfx
#         ../bx/tools/bin/linux/genie --with-shared-lib --gcc=android-${{matrix.platform}} gmake
#         make android-${{matrix.platform}}-release
#     - uses: actions/upload-artifact@v3
#       with:
#         name: bgfx-Android-${{matrix.platform}}
#         path: bgfx/.build/
#   buildBgfxLibraryForiOS:
#     name: Build bgfx for iOS ${{matrix.platform}}
#     runs-on: macos-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         platform:
#           - arm
#           - arm64
#     steps:
#     - uses: actions/checkout@v3
#       with:
#         fetch-depth: 1
#         lfs: true
#         submodules: recursive
#     - name: Build library
#       run: |
#         cd bgfx
#         ../bx/tools/bin/darwin/genie --with-shared-lib --xcode=ios xcode9
#         make ios-${{matrix.platform}}-release
#     - uses: actions/upload-artifact@v3
#       with:
#         name: bgfx-iOS-${{matrix.platform}}
#         path: bgfx/.build/

  buildNugetDesktop:
    name: Build nuget package for desktop platforms
    needs: [buildBgfxLibraryForWindows, buildBgfxLibraryForLinux]
    runs-on: windows-latest

    defaults:
      run:
        shell: powershell
    env:
      version:

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
        lfs: true
        submodules: recursive

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Download artifact (Win x64)
      uses: actions/download-artifact@v4
      with:
        name: bgfx-Windows-x64
        path: src\BgfxNet.Desktop\runtimes\win-x64\native\
    - name: Download artifact (Win x86)
      uses: actions/download-artifact@v4
      with:
        name: bgfx-Windows-Win32
        path: src\BgfxNet.Desktop\runtimes\win-x86\native\
    - name: Download artifact (Linux)
      uses: actions/download-artifact@v4
      with:
        name: bgfx-Linux
        path: src\BgfxNet.Desktop\runtimes\linux-x64\native\
    - name: Download artifact (OSX arm64)
      uses: actions/download-artifact@v4
      with:
        name: bgfx-OSX-arm64
        path: src\BgfxNet.Desktop\runtimes\osx-arm64\native\
    - name: Download artifact (OSX x64)
      uses: actions/download-artifact@v4
      with:
        name: bgfx-OSX-x64
        path: src\BgfxNet.Desktop\runtimes\osx-x64\native\

    - name: Set artifacts directory
      id: artifactsPath
      run: echo "::set-output name=NUGET_ARTIFACTS::${{github.workspace}}\artifacts"

    - name: Pack Nuget
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      run: dotnet pack -c Release src\BgfxNet.Desktop /p:Version=${{ github.ref_name }} /p:GenerateDocumentationFile=true /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg -o ${{steps.artifactsPath.outputs.nuget_artifacts}}

    - name: Pack Nuget
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      run: dotnet pack -c Release src\BgfxNet.Desktop /p:GenerateDocumentationFile=true /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg -o ${{steps.artifactsPath.outputs.nuget_artifacts}}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: BgfxNet.Desktop
        path: |
            ${{steps.artifactsPath.outputs.nuget_artifacts}}\*.nupkg
            ${{steps.artifactsPath.outputs.nuget_artifacts}}\*.snupkg